# OneTabPro Chrome扩展项目规则

## 代码组织规则

1. 所有React组件必须:
   - 使用函数组件和React hooks
   - 使用TypeScript类型定义
   - 放置在`src/components`目录下，按功能组织子目录
   - 组件文件名使用PascalCase命名
   - 导出的组件名与文件名一致

2. 服务类必须:
   - 实现为静态类
   - 放置在`src/services`目录中
   - 文件名使用camelCase命名，以Service结尾
   - 所有公共方法必须使用JSDoc注释

3. React上下文必须:
   - 放置在`src/contexts`目录下
   - 每个上下文文件包含Provider组件、上下文对象和自定义钩子
   - 上下文钩子命名为`use{ContextName}`
   - 上下文值类型命名为`{ContextName}Value`

4. 类型定义必须:
   - 放置在`src/types`目录下
   - 使用TypeScript接口或类型别名
   - 接口命名为PascalCase
   - 导出类型供整个应用使用

5. 自定义钩子必须:
   - 放置在`src/hooks`目录中
   - 文件名使用camelCase命名
   - 所有钩子名必须以use前缀开始
   - 一个文件应只包含一个主要钩子及其辅助函数

6. 后台服务必须:
   - 放置在`src/background`目录下
   - 采用事件驱动模型处理消息
   - 维护清晰的服务边界和职责划分

## 开发规范

1. TypeScript类型安全:
   - 禁止使用`any`类型，优先使用明确的类型定义
   - 使用泛型提高代码复用性
   - 对外部数据进行类型守卫验证
   - 使用TypeScript严格模式

2. 组件设计:
   - 保持组件职责单一
   - 避免大型复杂组件，拆分为多个小组件
   - 使用Props接口定义组件属性
   - 避免使用Class组件

3. 状态管理:
   - 使用React Context存储全局状态
   - 组件内部状态使用useState或useReducer
   - 复杂状态更新使用不可变数据模式
   - 异步操作使用async/await配合try/catch

4. 样式规范:
   - 使用Tailwind CSS实用类
   - 遵循移动优先的响应式设计原则
   - 避免内联样式
   - 复杂UI组件抽取为可复用组件

5. 错误处理:
   - 所有异步操作必须包含错误处理
   - 使用统一的错误状态管理
   - 向用户展示友好的错误信息
   - 在开发模式下记录详细错误信息

6. 性能优化:
   - 使用React.memo避免不必要的重渲染
   - 使用useMemo和useCallback记忆化计算和函数
   - 大列表使用虚拟化技术
   - 避免组件渲染中的副作用

## 浏览器扩展特定规则

1. Chrome API使用:
   - 封装所有Chrome API调用到相应服务类中
   - 使用异步/等待模式处理API回调
   - 确保API错误得到妥善处理
   - 遵循Chrome扩展最佳实践

2. Manifest V3规范:
   - 使用服务工作者代替后台页面
   - 遵循内容安全策略限制
   - 谨慎管理扩展权限
   - 确保资源在manifest中正确声明

3. 消息传递:
   - 使用统一的消息结构 {type, data}
   - 所有消息类型在枚举中定义
   - 实现超时处理机制
   - 异步消息使用Promise封装

4. 存储策略:
   - 优先使用chrome.storage.local
   - 实现数据压缩机制应对存储限制
   - 大型数据使用分块存储策略
   - 对存储操作实现重试机制

5. 权限管理:
   - 遵循最小权限原则
   - 仅在需要时请求权限
   - 提供清晰的权限解释
   - 优雅处理权限被拒绝的情况

## 数据同步规则

1. 离线优先策略:
   - 所有操作优先保存到本地
   - 维护离线操作队列
   - 连接恢复后自动同步
   - 实现基于时间戳的冲突解决

2. 用户认证:
   - 安全存储令牌
   - 实现令牌自动续期
   - 提供清晰的登录状态指示
   - 未登录状态下禁用同步功能

3. 数据缓存:
   - 缓存同步数据减少网络请求
   - 实现缓存过期机制
   - 提供手动刷新选项
   - 缓存同步状态和时间戳

## 命名约定

1. 文件命名:
   - 组件文件: `PascalCase.tsx`
   - 钩子文件: `useHookName.ts`
   - 服务类文件: `serviceName.ts`
   - 类型定义文件: `typeCategory.ts`
   - 工具函数文件: `utilityCategory.ts`

2. 变量命名:
   - 组件名: `PascalCase`
   - 函数和变量: `camelCase`
   - 常量: `UPPER_SNAKE_CASE`
   - 接口: `I前缀 + PascalCase`
   - 类型: `PascalCase`

3. CSS类命名:
   - 使用Tailwind CSS类名
   - 自定义类名使用kebab-case
   - 组件特定类名添加组件前缀

## 杂项规则

1. 不使用全局状态管理库，使用React Context
2. 禁止在组件中直接调用Chrome API，通过服务类封装
3. 所有持久化数据必须序列化并验证
4. 实现权限访问控制，防止未授权操作
5. 遵循Web无障碍标准，确保扩展可访问性
6. 使用语义化HTML元素构建UI
7. 禁止硬编码字符串，使用常量或配置文件
8. 实现完善的错误边界，防止整个应用崩溃
 