# OneTabPro 项目规则和模式

## 项目结构

- 前端代码按功能和组件类型组织
- 后端代码遵循控制器-服务-仓库模式
- 所有组件都使用 TypeScript 接口进行类型定义

## 命名约定

- React 组件：PascalCase（例如，TabGroup.tsx）
- React hooks：camelCase 带 use 前缀（例如，useTabGroups.ts）
- API 端点：kebab-case（例如，/api/tab-groups）
- 数据库表：snake_case（例如，tab_groups）
- TypeScript 接口：PascalCase 带 I 前缀（例如，ITabGroup）
- TypeScript 类型：PascalCase（例如，TabGroupResponse）

## 代码模式

- 在 React 中使用函数组件和 hooks
- 除非绝对必要，否则避免使用类组件
- 使用 Context API 进行状态管理
- 相比于 Promise 链，更倾向于使用 async/await
- 使用 try/catch 块进行错误处理

## API 约定

- 用于 CRUD 操作的 RESTful 端点
- 适当使用 HTTP 状态码（200, 201, 400, 401, 403, 404, 500）
- 所有响应采用一致的 JSON 格式
- 错误响应中始终包含错误消息和代码
- 在 Authorization 头中使用 JWT 令牌（Bearer 方案）

## 扩展模式

- 后台 service worker 用于处理事件和 API 调用
- 弹出式 UI 用于用户交互
- 本地存储用于缓存和离线功能
- Chrome API 交互封装在服务类中

## 数据库模式

- 对主键使用 UUID
- 包含 created_at 和 updated_at 时间戳
- 使用外键表示关系
- 适当时使用软删除
- 对频繁查询的字段进行适当索引

## 测试方法

- 对工具函数和服务进行单元测试
- 对 React 组件进行组件测试
- 对 API 端点进行集成测试
- 对关键流程进行端到端测试

## 文档要求

- 所有函数使用 JSDoc 注释
- 每个主要目录都有 README 文件
- 带有示例的 API 文档
- 复杂功能的架构图

## 开发工作流

- 功能分支工作流
- 所有更改都需要拉取请求
- 需要代码审查
- 合并前必须通过代码检查和测试
- 使用规范的提交消息

## 安全考虑

- 永不在 localStorage 中存储敏感数据
- JWT 令牌必须具有适当的过期时间
- 始终验证和净化用户输入
- 为扩展使用内容安全策略
- 所有 API 通信使用 HTTPS

## 性能指南

- 优化 React 组件渲染
- 对昂贵的计算使用记忆化
- 尽可能批量处理 API 请求
- 实现高效的标签页操作
- 注意扩展的内存使用
